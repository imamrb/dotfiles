#!/bin/bash

# SHELL

# Measure zsh starting time
shelltime() {
  shell=${1-$SHELL} # Take an arguments or default
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"

alias nano="nvim"
# alias cat="bat -pp"

# CD
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -="cd -"

# DOTFILES
alias j='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias jc='j commit --verbose'
alias jcm='j commit --verbose -m'
alias jp='j push'
alias jpl='j pull'
alias js='j status'
alias jst='j status'
alias jat='j add -u'        # Stage all updates of tracked files
alias jlo='j log --oneline'


alias sz="source ~/.zshrc"


# pretty path print
function ppath() {
  echo $PATH | tr ':' '\n'
}

# Create a new directory and enter it
function mcd() {
  mkdir -p "$@" && cd "$@"
}

function mktouch() {
  mkdir -p "$(dirname "$1")" && touch "$1"
}

# Shortcuts
alias doc="cd ~/Documents"
alias dod="cd ~/Downloads"
alias desk="cd ~/Desktop"
alias pic="cd ~/Pictures"
alias proj="cd ~/Projects"

# ZINIT
alias zu='zinit update'
alias zup='zinit update --parallel'
alias zd='zinit delete'
alias zdc='zinit delete --clean' # Delete unused plugins
alias zdc='zinit delete --all' # Delete all plugins
alias zcu='zinit cuninstall zsh-users/zsh-completions'
alias zci='zinit creinstall zsh-users/zsh-completions' # Fix compdef: unknown command or service

# Process IDs occupying port 3000
function tcp() {
  lsof -wni tcp:${1:-3000}
}

# GNU

alias ls='eza --icons --group-directories-first'
# alias cat='batcat'
alias preview="fzf --preview 'bat --color \"always\" {}'"
alias up='sudo apt update -y && sudo apt upgrade -y'


# RAILS

# Check if the file exist, check if the process exist with the PID, then kill rails server
alias killr='PID=tmp/pids/server.pid && test -f $PID && ps -p $(cat $PID) > /dev/null && kill -9 $(cat $PID) && echo kill rs success'
alias rdsr='rails db:seed:replant'
alias rded='bin/rails db:environment:set RAILS_ENV=development'
alias rdd='RAILS_ENV=development rails db:drop'
alias rdm='RAILS_ENV=development rails db:migrate'
alias rtdm='RAILS_ENV=test rails db:migrate'
function rdcms() {
  echo "\nInitiating rails db reset..."
  bin/rails RAILS_ENV=development db:environment:set
  bundle e rails db:drop db:create db:schema:load db:migrate db:seed
}

# Force run rails server.
function rs() {
  port=3000

  if [ "$1" ] && ([ "$1" = "-p" ] || [ "$1" = "--port" ]) ; then
    port="$2"
  fi

  PID=tmp/pids/server.pid

  if [ -f $PID ]; then
    echo -e "\e[1;31mStopping Running Process... \e[0m"
    
    [ -s $PID ] && kill -9 $(cat $PID)
    
    rm ./tmp/pids/server.pid &> /dev/null 
  fi

  if ! [ -z "$(lsof -wni tcp:$port)" ]; then
    echo -e "\e[1;31mStopping Running Process... \e[0m"
    
    fuser -k -n tcp $port &> /dev/null
  fi

  echo -e "\e[1;36mStarting Rails Server...\e[0m"

  RAILS_ENV=development rails server "$@"
}

# Mac

opena() {
 open "/System/Volumes/Data/Applications/$@"
}

# Brew

alias bs='brew services'
alias bsl='brew services list'
alias bss='brew services start'
alias bsq='brew services stop'

# POSTGRES

alias pgstart='brew services start postgresql'
alias pgstatus='brew services list'
alias pgstop='brew services stop postgresql'


# MySQL

alias mqstart='brew services start mysql'
alias mqstatus='brew services list'
alias mqstop='brew services stop mysql'
alias mysql='mysql -u root' # mysql root user without password


# ALIASES

alias ta='tmux attach -t'
alias tad='tmux attach -d -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tksv='tmux kill-server'
alias tkss='tmux kill-session -t'

# Git

alias gitpc='git config --local user.email imam.swe@gmail.com; git config --local user.name "Imam Hossain";'
alias gitwc='git config --local user.email ihossain@gitlab.com; git config --local user.name "Imam Hossain";'

alias g='git'
alias gs='git status'
alias gst='git status'

alias ga='git add'
alias gaa='git add .'	  # Stage all changes
alias gat='git add -u'  # Stage all changes of tracked files only

alias gb='git branch'
alias gbr='git branch -r'
alias gba='git branch -a'
alias gbd='git branch --delete'
alias gbdd='git branch --delete --force'
alias gbdr='git push origin --delete'

alias gc='git commit --verbose'
alias gcm='git commit --verbose -m'
alias gcam='git commit --verbose --amend -m' # add changes and modify last commit message
alias gcaf='git commit --amend --no-edit'    # add changes to last commit without edit
alias gcem='git commit --allow-empty -m'


alias gcb='git branch --show-current'
alias gcc='git clean -df && git checkout -- .' # delete unstaged files and discard all unstage changes
alias gco='git checkout'
alias gcoa='git checkout .'

alias gcp='git cherry-pick'
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'

alias grv='git revert'
alias grva='git revert --abort'
alias grvm='git revert -m'

alias gd='git diff'
alias gdd='git diff develop'
alias gdm='git diff master'
alias gdc='git diff --cached'
alias gdcs='git diff --cached --stat'
alias gds='git diff --staged'
alias gdh='git diff HEAD'

alias gf='git fetch'
alias gfa='git fetch --all'
alias gfp='git fetch --prune'

alias gg='git grep'
alias ggn='git grep -n'

alias gl='git log'
alias glp='git log --patch'
alias glo='git log --oneline'
alias glg='git log --graph --color --decorate --oneline'

alias glsf='git ls-files'

alias gp='git push'
alias gpf='git push -f'
alias gpd='git push --delete'
alias gpdcb='git push --delete origin $(gcb)'
alias gpsu='git push --set-upstream'
alias gpcb='gpsu origin $(gcb)'

alias gpl='git pull'
alias gplra='git pull --rebase --autostash'
alias gplnr='git pull --no-rebase'

alias gm='git merge'
alias gma='git merge --abort'

alias grb='git rebase'
alias grbi='git rebase --interactive'
alias grbc='git rebase --continue'
alias grbs='git rebase --skip'
alias grba='git rebase --abort'

alias gre='git remote'
alias grel='git remote list'
alias gres='git remote show'

alias grs='git reset --soft'
alias grs1='git reset --soft HEAD~1' # soft reset last commit
alias grh='git reset --hard'
alias grh1='git reset --hard HEAD~1' # hard reset last commit
alias grhr='git reset --hard `origin/$(git branch --show-current)`'

# git restore
alias gres='git restore --staged'
alias gresa='git restore --staged .'

alias grfl='git reflog'

alias gn='git notes'
alias gna='git notes add'
alias gne='git notes edit'
alias gnr='git notes remove'

alias gsh='git show'

alias gsm='git submodule'
alias gsma='git submodule add'
alias gsms='git submodule status'
alias gsmi='git submodule init'
alias gsmd='git submodule deinit'
alias gsmu='git submodule update'
alias gsmui='git submodule update --init --recursive'
alias gsmf='git submodule foreach'
alias gsmy='git submodule sync'

alias gsta='git stash apply'
alias gstp='git stash pop'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gsts='git stash save'
alias gstsu='git stash save --include-untracked'
alias gstsp='git stash save --patch'
alias gitsh='git stash show'
alias gstsht='git stash show --text'
alias gstshs='git stash show --stat'

# checks for any files flagged w/ --skip-worktree alias
alias gskipls="git ls-files -v|grep '^S'"
gskip() {  git update-index --skip-worktree "$@";  git status; } # add --skip-worktree flag to file
gunskip() {  git update-index --no-skip-worktree "$@";  git status; } # remove --skip-worktree flag from file
gskipall() {
  git status --porcelain | cut -c4- | xargs ls -1 2>/dev/null | xargs git update-index --skip-worktree
}
gunskipall() {
  git ls-files -v | grep '^S' | cut -c3- | xargs ls -1 2>/dev/null | xargs git update-index --no-skip-worktree
}

# Run rubocop only on staged files
rbf() {
  git diff --relative --name-only --diff-filter=ACM HEAD | xargs bundle e rubocop -A --format fuubar --force-exclusion "$@"
}

rbc() {
  local curr_dir=$(pwd)
  local rubocop_path='src/api/'

  local files=$(git diff --relative --name-only --diff-filter=ACM HEAD | grep '\.rb$')
  
  if [[ -d $rubocop_path ]]; then
    local escaped_path=$(echo $rubocop_path | sed 's/\//\\\//g')
    files=$(echo "$files" | sed "s/$escaped_path//")
    cd $rubocop_path
  fi 
  
  echo -e "${Yellow}Files under inspection: \n\n${Cyan}$files\n${Green}"

  echo "$files" | xargs bundle exec rubocop --force-exclusion "$@"

  cd "$curr_dir" || return
}

# copy branch name - to clipboard
alias gcpbn="git branch | grep '^\*' | cut -d' ' -f2 | pbcopy"          # copy the name of the current branch

# copy last commit id - to clipboard
alias gcplci='git log -1 --format="%h" | pbcopy | echo copied `git log -1 --format="%h"`'

# git search and replace, original_text = $1, replace_text=$2
function gsed(){
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    git grep -l $1 | xargs sed -i'' -e "s/$1/$2/g"
  else
    git grep -l $1 | xargs sed -i "s/$1/$2/g"
  fi
}

gdiff() {
  preview="git diff $@ --color=always -- {-1} | delta --line-numbers"
  git diff $@ --name-only | fzf -m --ansi --preview $preview
}

batdiff() {
  git diff $@ --name-only --relative --diff-filter=d | xargs bat --diff
}


local dsfpreview="diff-so-fancy | less --tabs=2 -FXRi"

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
glog() {
  local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | $dsfpreview'"

   glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --no-multi \
        --ansi --preview="$_viewGitLogLine" \
        --header "enter to view, alt-y to copy hash" \
        --bind "enter:execute:$_viewGitLogLine   | less -R" \
        --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# usage: 
# gsync develop # will rebase with develop
# gsync develop merge # will merge with develop
gsync() {
  git checkout $1 && git pull && git checkout - && git "${2:-rebase}" $1
}

# Sync all projects with remote in the current directory
pullall() {
  # store the current dir
  CUR_DIR=$(pwd)

  # Let the person running the script know what\'s going on.
  echo "\n\e[32mPulling in latest changes for all repositories...\e[0m\n"

  # Find all git repositories and update it to the master latest revision
  for i in $(find . -name ".git" | cut -c 3-); do
      echo "";
      echo "\n\e[33m" + $i + "\e[0m";

      # We have to go to the .git parent directory to call the pull command
      cd "$i";
      cd ..;

      git fetch --prune
      # finally pull
      [[ `git branch --list master` ]] && git fetch origin master:master;
      [[ `git branch --list develop` ]] && git fetch origin develop:develop;

      # lets get back to the CUR_DIR
      cd $CUR_DIR
  done

  echo "\n\e[32mComplete!\e[0m\n"
}


# Utilities

# Networking
alias dig="dig +nocmd any +multiline +noall +answer"
alias ip="dig +short o-o.myaddr.l.google.com @ns1.google.com"
alias localIp="ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'"

# find all files with a given extension
function findf() {
  find . -name "*$1" -type f
}

# find and delete all files with a given extension
function deletef() {
  find . -name "*$1" -type f -delete
}

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
function csv(){
  sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# animated gifs from any video
function gify() {
  start=`date +%s`
  # Usage function, displays valid arguments
  usage() { echo "$0: [-f <fps, defaults to 15>] [-w <width, defaults to 840] inputfile" 1>&2; return 0; }

  # Default variables
  fps=15
  width=840

  # getopts to process the command line arguments
  while getopts ":f:w:" opt; do
      case "${opt}" in
          f) fps=${OPTARG};;
          w) width=${OPTARG};;
          *) usage && return;;
      esac
  done

  # shift out the arguments already processed with getopts
  shift "$((OPTIND - 1))"
  if (( $# == 0 )); then
      echo >&2 'Missing input file\n'
      usage >&2
      return
  fi

  # set input variable to the first option after the arguments
  input="$1"

  # Extract filename from input file without the extension
  filename=$(basename "$input")
  #extension="${filename##*.}"
  filename="${filename%.*}.gif"

  # Debug display to show what the script is using as inputs
  echo "Input: $#"
  echo "Output: $filename"
  echo "FPS: $fps"
  echo "Width: $width"

  # temporary file to store the first pass pallete
  palette="/tmp/palette.png"

  # options to pass to ffmpeg
  filters="fps=$fps,scale=$width:-1:flags=lanczos"

  # ffmpeg first pass
  ffmpeg -v error -i "$input" -vf "$filters,palettegen" -y $palette

  # ffmpeg second pass
  ffmpeg -v error -i "$input" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse=dither=bayer:bayer_scale=3" -y "$filename"

  end=`date +%s`
  runtime=$((end-start))

  # display output file size
  filesize=$(du -h "$filename" | cut -f1)
  echo "\nOutput File Name: $filename"
  echo "Output File Size: $filesize"
  echo "Time taken: $runtime seconds"
}

